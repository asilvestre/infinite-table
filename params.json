{"name":"Infinite-table","tagline":"","body":"# infinite-table\r\n\r\nAn infinite scrolling table with editable features. No jQuery.\r\n\r\n### Usage\r\n\r\nMinimum required setup:\r\n\r\n    var InfiniteScroll = require('infinite-table');\r\n    new InfiniteScroll('<table element ID>', {\r\n        url: <url to get data from>,\r\n        fields: {\r\n            <returned data property> : {}\r\n        }\r\n    });\r\n\r\nFor the spinner, include \r\n\r\n    <link rel=\"stylesheet\" href=\"/css/style.css\"/>\r\n\r\nOptions: \r\n    \r\n    new InfiniteScroll('<table element ID>', {\r\n        url: <url to get data from>,\r\n        fields: {\r\n            <returned data property> : {\r\n                data: {\r\n                    <data-attribute>: ':<returned data property>:'\r\n                    // for example:\r\n                    id: ':id:' // will create a data-attribute like data-id=\"1\"\r\n                },\r\n                // setup listener, e.g. \"click\" listener (set as many as you wish):\r\n                listener: [{\r\n                    handle: (e) => {alert(e.target.innerHTML)}, // callback\r\n                    on: 'click' // listen for event\r\n                }],\r\n                // if editable is provided, the td will be given contenteditable attribute,\r\n                // same signature as above for listeners\r\n                editable: [{\r\n                    handle: (e) => {alert(e.target.innerHTML)},\r\n                    on: 'blur'\r\n                }]\r\n            }\r\n        },\r\n        perPage: 20, // how many entries should be fetched per \"page\"\r\n        loadTiming: 2, // when should the loading happen (defaults to the penultimate tr)\r\n        transport: 'ajax', // possible transports: ajax/websockets,\r\n        spinner: 0 // possible 0, 1, 2\r\n    });\r\n   \r\n\r\n\r\nAn ajax (default) / websockets `GET` request is made whenever you hit the trigger. The signature is:\r\n    \r\n    <url>?skip=<skip>&limit=<limit>\r\n    \r\nSo your backend only has to `GET` skip and limit to query for the data. \r\nExample query\r\n\r\n    SELECT * FROM `foo` LIMIT <limit> OFFSET <skip>\r\n    \r\nIf you're using [sails.js](https://github.com/balderdashy/sails) you're in luck - simply create the contoller and model,\r\neverything else works out of the box.\r\n    \r\nThe scroller expects json data as returned object.    \r\n   \r\n### INCLUDED DEPENDENCIES\r\n    \r\nlodash, bluebird    \r\nincluded: SpinKit from https://github.com/tobiasahlin/SpinKit\r\n    \r\n### LICENSE\r\n\r\nMIT","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}